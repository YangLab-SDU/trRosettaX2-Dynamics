# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""RNA Constants."""
from copy import deepcopy

import ml_collections
import numpy as np
from collections import defaultdict

RESD_NAMES = ['A', 'G', 'U', 'C']
ATOM_NUM_MAX = 14
N_ANGLS_PER_RESD_MAX = 6

restype_1to3 = {
    "A": "ALA",
    "R": "ARG",
    "N": "ASN",
    "D": "ASP",
    "C": "CYS",
    "Q": "GLN",
    "E": "GLU",
    "G": "GLY",
    "H": "HIS",
    "I": "ILE",
    "L": "LEU",
    "K": "LYS",
    "M": "MET",
    "F": "PHE",
    "P": "PRO",
    "S": "SER",
    "T": "THR",
    "W": "TRP",
    "Y": "TYR",
    "V": "VAL",
}

# NB: restype_3to1 differs from Bio.PDB.protein_letters_3to1 by being a simple
# 1-to-1 mapping of 3 letter names to one letter names. The latter contains
# many more, and less common, three letter names as keys and maps many of these
# to the same one letter name (including 'X' and 'U' which we don't use here).
restype_3to1 = {v: k for k, v in restype_1to3.items()}
restype_3to1['MSE'] = 'M'
restype_3to1['PHD'] = 'D'

# Define a restype name for all unknown residues.
unk_restype = "UNK"

# A list of atoms (excluding hydrogen) for each AA type. PDB naming convention.
residue_atoms = {
    "ALA": ["C", "CA", "CB", "N", "O"],
    "ARG": ["C", "CA", "CB", "CG", "CD", "CZ", "N", "NE", "O", "NH1", "NH2"],
    "ASP": ["C", "CA", "CB", "CG", "N", "O", "OD1", "OD2"],
    "ASN": ["C", "CA", "CB", "CG", "N", "ND2", "O", "OD1"],
    "CYS": ["C", "CA", "CB", "N", "O", "SG"],
    "GLU": ["C", "CA", "CB", "CG", "CD", "N", "O", "OE1", "OE2"],
    "GLN": ["C", "CA", "CB", "CG", "CD", "N", "NE2", "O", "OE1"],
    "GLY": ["C", "CA", "N", "O"],
    "HIS": ["C", "CA", "CB", "CG", "CD2", "CE1", "N", "ND1", "NE2", "O"],
    "ILE": ["C", "CA", "CB", "CG1", "CG2", "CD1", "N", "O"],
    "LEU": ["C", "CA", "CB", "CG", "CD1", "CD2", "N", "O"],
    "LYS": ["C", "CA", "CB", "CG", "CD", "CE", "N", "NZ", "O"],
    "MET": ["C", "CA", "CB", "CG", "CE", "N", "O", "SD"],
    "PHE": ["C", "CA", "CB", "CG", "CD1", "CD2", "CE1", "CE2", "CZ", "N", "O"],
    "PRO": ["C", "CA", "CB", "CG", "CD", "N", "O"],
    "SER": ["C", "CA", "CB", "N", "O", "OG"],
    "THR": ["C", "CA", "CB", "CG2", "N", "O", "OG1"],
    "TRP": [
        "C",
        "CA",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "CE2",
        "CE3",
        "CZ2",
        "CZ3",
        "CH2",
        "N",
        "NE1",
        "O",
    ],
    "TYR": [
        "C",
        "CA",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "CE1",
        "CE2",
        "CZ",
        "N",
        "O",
        "OH",
    ],
    "VAL": ["C", "CA", "CB", "CG1", "CG2", "N", "O"],
}

ATOM_NAMES_PER_RESD = {restype_3to1[k]: residue_atoms[k] for k in residue_atoms}


# A compact atom encoding with 14 columns
# pylint: disable=line-too-long
# pylint: disable=bad-whitespace
restype_name_to_atom14_names = {
    "ALA": ["N", "CA", "C", "O", "CB", "", "", "", "", "", "", "", "", ""],
    "ARG": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD",
        "NE",
        "CZ",
        "NH1",
        "NH2",
        "",
        "",
        "",
    ],
    "ASN": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "OD1",
        "ND2",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "ASP": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "OD1",
        "OD2",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "CYS": ["N", "CA", "C", "O", "CB", "SG", "", "", "", "", "", "", "", ""],
    "GLN": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD",
        "OE1",
        "NE2",
        "",
        "",
        "",
        "",
        "",
    ],
    "GLU": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD",
        "OE1",
        "OE2",
        "",
        "",
        "",
        "",
        "",
    ],
    "GLY": ["N", "CA", "C", "O", "", "", "", "", "", "", "", "", "", ""],
    "HIS": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "ND1",
        "CD2",
        "CE1",
        "NE2",
        "",
        "",
        "",
        "",
    ],
    "ILE": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG1",
        "CG2",
        "CD1",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "LEU": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "LYS": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD",
        "CE",
        "NZ",
        "",
        "",
        "",
        "",
        "",
    ],
    "MET": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "SD",
        "CE",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "PHE": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "CE1",
        "CE2",
        "CZ",
        "",
        "",
        "",
    ],
    "PRO": ["N", "CA", "C", "O", "CB", "CG", "CD", "", "", "", "", "", "", ""],
    "SER": ["N", "CA", "C", "O", "CB", "OG", "", "", "", "", "", "", "", ""],
    "THR": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "OG1",
        "CG2",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "TRP": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "NE1",
        "CE2",
        "CE3",
        "CZ2",
        "CZ3",
        "CH2",
    ],
    "TYR": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG",
        "CD1",
        "CD2",
        "CE1",
        "CE2",
        "CZ",
        "OH",
        "",
        "",
    ],
    "VAL": [
        "N",
        "CA",
        "C",
        "O",
        "CB",
        "CG1",
        "CG2",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
    ],
    "UNK": ["", "", "", "", "", "", "", "", "", "", "", "", "", ""],
}

VDW_RAD = defaultdict(lambda: 1.5)
VDW_RAD.update({
    'C': 1.7,
    'N': 1.55,
    'O': 1.52,
    'P': 1.8,
    'X': 1.5
})


# atom coordinate information
ATOM_INFOS_PER_RESD = {
    'A': [
        ["C4'", 0, (-1.276165, 1.959880, -0.000000)],
        ["C1'", 0, (0.000000, 0.000000, 0.000000)],
        ["N9", 0, (1.475205, -0.000001, -0.000000)],
        ["C4", 3, (-0.807920, 1.111760, 0.000005)],
        ["N1", 3, (-2.758503, 2.897898, 0.001554)],
        ["C2", 3, (-1.460024, 3.206003, 0.011345)],
        ["N3", 3, (-0.411131, 2.394717, 0.011532)],
        ["C5", 3, (-2.096065, 0.639899, -0.008968)],
        ["C6", 3, (-3.118781, 1.602769, -0.010104)],
        ["N6", 3, (-4.419309, 1.291705, -0.019290)],
        ["N7", 3, (-2.111291, -0.746117, -0.018068)],
        ["C8", 3, (-0.849659, -1.070600, -0.010794)],
        ["C5'", 4, [-1.10874687, 1.01673535, 0.]],
        ["C2'", 4, [1.85318569, -1.02712654, 1.01780534]],
        ["C3'", 4, [0.47798858, -0.47764505, 1.35371958]],
        ["O4'", 4, [1.18635981, 0.5822386, -0.58373173]],
        ["O2'", 4, [1.91314991, -2.31822578, 0.46687931]],
        ["O3'", 4, [-0.375733, -1.45141118, 1.89992594]],
        ["O5'", 5, (-0.496598, 1.344835, 0.000001)],
        ["P", 6, (-0.814813806, 1.36798321, 0.000)],
        ["OP1", 6, (-0.31508281, 2.20086133, -1.13286453)],
        ["OP2", 6, (-2.26136839, 1.04998483, 0.0978325)],
    ],

    'G': [
        ["C4'", 0, (-1.290627, 1.934672, -0.000000)],
        ["C1'", 0, (0.000000, 0.000000, 0.000000)],
        ["N9", 0, (1.468708, -0.000001, -0.000000)],
        ["C4", 3, (-0.810758, 1.110910, -0.000003)],
        ["N1", 3, (-2.729542, 2.870383, 0.004097)],
        ["N2", 3, (-1.177098, 4.564092, -0.000022)],
        ["N3", 3, (-0.396910, 2.396043, -0.002390)],
        ["C2", 3, (-1.411283, 3.249483, 0.000035)],
        ["C5", 3, (-2.100985, 0.632358, 0.004182)],
        ["C6", 3, (-3.176985, 1.556655, 0.005911)],
        ["N7", 3, (-2.108585, -0.756168, 0.007856)],
        ["C8", 3, (-0.845640, -1.077105, 0.005711)],
        ["O6", 3, (-4.385028, 1.323046, 0.008872)],
        ["C5'", 4, [-1.10874687, 1.01673535, 0.]],
        ["C2'", 4, [1.85318569, -1.02712654, 1.01780534]],
        ["C3'", 4, [0.47798858, -0.47764505, 1.35371958]],
        ["O4'", 4, [1.18635981, 0.5822386, -0.58373173]],
        ["O2'", 4, [1.91314991, -2.31822578, 0.46687931]],
        ["O3'", 4, [-0.375733, -1.45141118, 1.89992594]],
        ["O5'", 5, (-0.503097, 1.336331, -0.000002)],
        ["P", 6, (-0.814813806, 1.36798321, 0.000)],
        ["OP1", 6, (-0.31508281, 2.20086133, -1.13286453)],
        ["OP2", 6, (-2.26136839, 1.04998483, 0.0978325)],

    ],
    'U': [
        ["C4'", 0, (-1.350570, 1.894768, -0.000000)],
        ["C1'", 0, (0.000000, 0.000000, 0.000000)],
        ["N1", 0, (1.520579, -0.000001, -0.000000)],
        ["C2", 3, (-0.638019, 1.227940, 0.000004)],
        ["O2", 3, (-0.076077, 2.277670, -0.006829)],
        ["N3", 3, (-1.961198, 1.192599, 0.008837)],
        ["C4", 3, (-2.696898, 0.071705, 0.015805)],
        ["O4", 3, (-3.877673, 0.187693, 0.027359)],
        ["C5", 3, (-1.967988, -1.162564, 0.010670)],
        ["C6", 3, (-0.675351, -1.159303, 0.003821)],
        ["C5'", 4, [-1.10874687, 1.01673535, 0.]],
        ["C2'", 4, [1.85318569, -1.02712654, 1.01780534]],
        ["C3'", 4, [0.47798858, -0.47764505, 1.35371958]],
        ["O4'", 4, [1.18635981, 0.5822386, -0.58373173]],
        ["O2'", 4, [1.91314991, -2.31822578, 0.46687931]],
        ["O3'", 4, [-0.375733, -1.45141118, 1.89992594]],
        ["O5'", 5, (-0.501982, 1.337641, -0.000000)],
        ["P", 6, (-0.814813806, 1.36798321, 0.000)],
        ["OP1", 6, (-0.31508281, 2.20086133, -1.13286453)],
        ["OP2", 6, (-2.26136839, 1.04998483, 0.0978325)],

    ],
    'C': [
        ["C4'", 0, (-1.317305, 1.922806, -0.000000)],
        ["C1'", 0, (0.000000, 0.000000, 0.000000)],
        ["N1", 0, (1.478102, -0.000001, -0.000000)],
        ["C2", 3, (-0.664963, 1.227037, 0.000001)],
        ["O2", 3, (-0.012728, 2.274666, 0.004938)],
        ["N3", 3, (-2.019217, 1.239853, -0.004528)],
        ["C4", 3, (-2.703047, 0.095194, -0.007302)],
        ["N4", 3, (-4.032683, 0.156398, -0.015365)],
        ["C5", 3, (-2.045381, -1.169470, -0.005066)],
        ["C6", 3, (-0.704879, -1.170234, -0.001044)],
        ["C5'", 4, [-1.10874687, 1.01673535, 0.]],
        ["C2'", 4, [1.85318569, -1.02712654, 1.01780534]],
        ["C3'", 4, [0.47798858, -0.47764505, 1.35371958]],
        ["O4'", 4, [1.18635981, 0.5822386, -0.58373173]],
        ["O2'", 4, [1.91314991, -2.31822578, 0.46687931]],
        ["O3'", 4, [-0.375733, -1.45141118, 1.89992594]],
        ["O5'", 5, (-0.506114, 1.336065, 0.000000)],
        ["P", 6, (-0.814813806, 1.36798321, 0.000)],
        ["OP1", 6, (-0.31508281, 2.20086133, -1.13286453)],
        ["OP2", 6, (-2.26136839, 1.04998483, 0.0978325)],
    ],
}

ATOM_INFOS_PER_RESD_SYMM = deepcopy(ATOM_INFOS_PER_RESD)
for resd in ATOM_INFOS_PER_RESD_SYMM:
    ATOM_INFOS_PER_RESD_SYMM[resd]

TRANS_DICT_PER_RESD = {
    'A': {
        'angl_0-main': (np.array([[-1, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, -1]]),
                        np.array([1.46881441e+00, -1.25476846e-04, 0.00000000e+00])),

        'angl_1-main': (np.array([[5.31338572e-01, 8.47159562e-01, 3.00947741e-17],
                                  [-8.47159562e-01, 5.31338572e-01, -1.11139152e-16],
                                  [7.81620810e-17, -8.45475939e-17, 1.00000000e+00]]),
                        np.array([-1.24625789, 1.98593164, 0.])),
        'angl_2-angl_1': (np.array([[7.11726672e-01, 7.02456507e-01, 5.39813682e-09],
                                    [-7.02456507e-01, 7.11726672e-01, 4.18337725e-10],
                                    [-3.54813390e-09, -4.08969845e-09, 9.99999999e-01]]),
                          np.array([-1.07288531e+00, 1.05907371e+00, -6.47439669e-05])),
        'angl_3-angl_2': (np.array([[3.62808663e-01, 9.31863657e-01, 3.28152296e-09],
                                    [-9.31863657e-01, 3.62808663e-01, -5.25402360e-09],
                                    [-6.08659860e-09, -1.15172671e-09, 1.00000000e+00]]),
                          np.array([-5.15826981e-01, 1.32346701e+00, -8.63909241e-06]))
    },
    'G': {
        'angl_0-main': (np.array([[-1, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, -1]]),
                        np.array([1.46881441e+00, -1.25476846e-04, 0.00000000e+00])),
        'angl_1-main': (np.array([[5.27476374e-01, 8.49569700e-01, 3.05090896e-17],
                                  [-8.49569700e-01, 5.27476374e-01, -1.10070363e-16],
                                  [7.74196217e-17, -8.39791143e-17, 1.00000000e+00]]),
                        np.array([-1.23796526, 1.99199347, 0.])),
        'angl_2-angl_1': (np.array([[7.14181270e-01, 6.99960794e-01, 5.55474827e-09],
                                    [-6.99960794e-01, 7.14181270e-01, 4.89507431e-10],
                                    [-3.62446116e-09, -4.23770305e-09, 1.00000000e+00]]),
                          np.array([-1.07288531e+00, 1.05907371e+00, -6.47439669e-05])),
        'angl_3-angl_2': (np.array([[3.62808663e-01, 9.31863657e-01, 3.28152296e-09],
                                    [-9.31863657e-01, 3.62808663e-01, -5.25402360e-09],
                                    [-6.08659860e-09, -1.15172671e-09, 1.00000000e+00]]),
                          np.array([-5.15826981e-01, 1.32346701e+00, -8.63909241e-06]))
    },
    'U': {
        'angl_0-main': (np.array([[-1, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, -1]]),
                        np.array([1.48007866e+00, -1.30017464e-04, 0.00000000e+00])),
        'angl_1-main': (np.array([[5.53583199e-01, 8.32793877e-01, 2.99668484e-17],
                                  [-8.32793877e-01, 5.53583199e-01, -1.09903699e-16],
                                  [7.49379836e-17, -8.57970491e-17, 1.00000000e+00]]),
                        np.array([-1.29865692, 1.95208333, 0.])),
        'angl_2-angl_1': (np.array([[7.17609652e-01, 6.96445538e-01, -3.61231042e-09],
                                    [-6.96445538e-01, 7.17609652e-01, 4.30436311e-09],
                                    [5.58998331e-09, -5.73075041e-10, 1.00000000e+00]]),
                          np.array([-1.08167791e+00, 1.04991496e+00, -6.80789662e-05])),
        'angl_3-angl_2': (np.array([[3.62808663e-01, 9.31863657e-01, 3.28152296e-09],
                                    [-9.31863657e-01, 3.62808663e-01, -5.25402360e-09],
                                    [-6.08659860e-09, -1.15172671e-09, 1.00000000e+00]]),
                          np.array([-5.15826981e-01, 1.32346701e+00, -8.63909241e-06]))
    },
    'C': {
        'angl_0-main': (np.array([[-1, 0, 0],
                                  [0, 1, 0],
                                  [0, 0, -1]]),
                        np.array([1.48007866e+00, -1.30017464e-04, 0.00000000e+00])),
        'angl_1-main': (np.array([[5.44928749e-01, 8.38482355e-01, 3.05355586e-17],
                                  [-8.38482355e-01, 5.44928749e-01, -1.09747049e-16],
                                  [7.53812600e-17, -8.54078490e-17, 1.00000000e+00]]),
                        np.array([-1.27801624, 1.96592303, 0.])),
        'angl_2-angl_1': (np.array([[7.17609652e-01, 6.96445538e-01, -3.61231042e-09],
                                    [-6.96445538e-01, 7.17609652e-01, 4.30436311e-09],
                                    [5.58998331e-09, -5.73075041e-10, 1.00000000e+00]]),
                          np.array([-1.08167791e+00, 1.04991496e+00, -6.80789662e-05])),
        'angl_3-angl_2': (np.array([[3.62808663e-01, 9.31863657e-01, 3.28152296e-09],
                                    [-9.31863657e-01, 3.62808663e-01, -5.25402360e-09],
                                    [-6.08659860e-09, -1.15172671e-09, 1.00000000e+00]]),
                          np.array([-5.15826981e-01, 1.32346701e+00, -8.63909241e-06]))
    },
}

# torsion angle information for each residue type (name, symmetric or not, and atom names)
ANGL_INFOS_PER_RESD = {  # order matters
    'A': [
        ['angl_0', False, ["C4'", "C1'", 'N9', "C4"]],  # C4'-N9-C1'
        ['angl_1', False, ['N9', "C1'", "C4'", "C5'"]],  # N9-C4'-C1'
        ['angl_2', False, ["C1'", "C4'", "C5'", "O5'"]],  # C1'-C5'-C4'
        ['angl_3', False, ["C4'", "C5'", "O5'", "P"]],  # C4'-O5'-C5'
    ],
    'G': [
        ['angl_0', False, ["C4'", "C1'", 'N9', "C4"]],
        ['angl_1', False, ['N9', "C1'", "C4'", "C5'"]],
        ['angl_2', False, ["C1'", "C4'", "C5'", "O5'"]],
        ['angl_3', False, ["C4'", "C5'", "O5'", "P"]],
    ],
    'U': [
        ['angl_0', False, ["C4'", "C1'", 'N1', "C2"]],
        ['angl_1', False, ['N1', "C1'", "C4'", "C5'"]],
        ['angl_2', False, ["C1'", "C4'", "C5'", "O5'"]],
        ['angl_3', False, ["C4'", "C5'", "O5'", "P"]],
    ],
    'C': [
        ['angl_0', False, ["C4'", "C1'", 'N1', "C2"]],
        ['angl_1', False, ['N1', "C1'", "C4'", "C5'"]],
        ['angl_2', False, ["C1'", "C4'", "C5'", "O5'"]],
        ['angl_3', False, ["C4'", "C5'", "O5'", "P"]],
    ],
}

RNA_CONSTANTS = ml_collections.ConfigDict({
    'RESD_NAMES': RESD_NAMES,
    'ATOM_NUM_MAX': ATOM_NUM_MAX,
    'ATOM_INFOS_PER_RESD': ATOM_INFOS_PER_RESD,
    'ATOM_NAMES_PER_RESD': ATOM_NAMES_PER_RESD,
    'N_ANGLS_PER_RESD_MAX': N_ANGLS_PER_RESD_MAX,
    'ANGL_INFOS_PER_RESD': ANGL_INFOS_PER_RESD,
    'TRANS_DICT_PER_RESD': TRANS_DICT_PER_RESD,
}
)
